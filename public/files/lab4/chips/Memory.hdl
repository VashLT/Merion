/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        // load right data located at address
        // bits 13 and 14 of address dictates the destination (RAM or Screen)
        // if address[13..14] = 00 | 01 then dest = RAM, else if address[13..14] = 10 then dest = Screen
        DMux4Way(in=load, sel=address[13..14], a=RAM1, b=RAM2, c=screen, d=keyboard);

        Or(a=RAM1, b=RAM2, out=RAM);

        // bits from 0 to 13 index correspond to the actual address
        RAM16K(in=in, load=RAM, address=address[0..13], out=outRAM);

        // 14 bits are available, however, 13 bits is all what
        // the Hack's screen needs
        Screen(in=in, load=screen, address=address[0..12], out=outScreen);
        Keyboard(out=outKeyboard);
        Mux4Way16(a=outRAM, b=outRAM, c=outScreen, d=outKeyboard, sel=address[13..14], out=out);

}